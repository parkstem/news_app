{"version":3,"sources":["News.js","App.js","serviceWorker.js","index.js"],"names":["NewsImages","_ref2","poster","alt","react_default","a","createElement","src","title","className","News","_ref","author","description","App","state","_renderNews","_this","all_news","map","news","index","console","log","src_News","urlToImage","key","_getNews","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","articles","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAwBA,SAASA,EAATC,GAAkC,IAAbC,EAAaD,EAAbC,OAAOC,EAAMF,EAANE,IACxB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAOA,EAAKK,MAAOL,EAAKM,UAAU,iBAa7CC,MAlCf,SAAAC,GAAmD,IAAnCH,EAAmCG,EAAnCH,MAAON,EAA4BS,EAA5BT,OAAOU,EAAqBD,EAArBC,OAAOC,EAAcF,EAAdE,YACjC,OACIT,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAYE,OAAQA,EAAQC,IAAKK,KAErCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACXL,EAAAC,EAAAC,cAAA,cAAME,GACNJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACXL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,iBAAiBG,IAErCR,EAAAC,EAAAC,cAAA,KAAGG,UAAU,qBACRI,MCoCNC,6MA/CbC,MAAQ,KAQRC,YAAc,WAWZ,OAViBC,EAAKF,MAAMG,SAASC,IAAI,SAACC,EAAKC,GAE7C,OADAC,QAAQC,IAAIH,GACLhB,EAAAC,EAAAC,cAACkB,EAAD,CACPhB,MAAOY,EAAKZ,MACZN,OAAQkB,EAAKK,WACbC,IAAKL,EACLT,OAAQQ,EAAKR,OACbC,YAAaO,EAAKP,mBAMtBc,8BAAW,SAAAC,IAAA,IAAAV,EAAA,OAAAW,EAAAxB,EAAAyB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACchB,EAAKiB,WADnB,OACHhB,EADGa,EAAAI,KAETlB,EAAKmB,SAAS,CACZlB,aAHO,wBAAAa,EAAAM,SAAAT,QAOXM,SAAW,WACT,OAAOI,MAAM,2FACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,WAElBC,MAAM,SAAAC,GAAG,OAAItB,QAAQC,IAAIqB,yFA7B1BC,KAAKlB,4CAiCL,OACEvB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACXoC,KAAK9B,MAAMG,SAAW2B,KAAK7B,cAAgB,mEA1CnC8B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.14fa2f51.chunk.js","sourcesContent":["import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport './News.css';\r\n\r\n\r\nfunction News({ title, poster,author,description}) {\r\n    return (\r\n        <div className=\"News\">\r\n            <div className=\"News__Column\">\r\n                <NewsImages poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"News__Column\">\r\n                <h1> {title}</h1>\r\n                <div className=\"News__Author\">\r\n                    <span className=\"News__Author2\">{author}</span>\r\n                </div>\r\n                <p className=\"News__Description\">\r\n                    {description}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction NewsImages({poster,alt}) {\r\n    return (\r\n        <img src={poster} alt = {alt} title={alt} className=\"News__Images\" />\r\n    )\r\n}\r\n\r\nNews.propTypes = {\r\n    title: propTypes.string.isRequired,\r\n    poster: propTypes.string.isRequired,\r\n    author: propTypes.string.isRequired,\r\n    description: propTypes.string.isRequired\r\n}\r\n\r\n\r\n\r\nexport default News;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport News from './News';\n\nclass App extends Component {\n\n  state = { \n\n  }\n\n  componentDidMount() {\n    this._getNews();\n  }\n\n  _renderNews = () => {\n    const all_news = this.state.all_news.map((news,index) => {\n      console.log(news)\n      return <News \n      title={news.title} \n      poster={news.urlToImage} \n      key={index} \n      author={news.author}\n      description={news.description}\n      />\n    })\n    return all_news\n  }\n\n  _getNews = async () => {\n    const all_news = await this._callApi()\n    this.setState({\n      all_news\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://newsapi.org/v2/top-headlines?country=kr&apiKey=2f00d3a6133349baa018e75d6963c510')\n    .then(response => response.json())\n    .then(json => json.articles)\n    //.then(json => console.log(json))\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        { this.state.all_news ? this._renderNews() : '잠시만 기다려 주세요'}\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}